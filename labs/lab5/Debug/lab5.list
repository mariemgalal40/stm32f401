
lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000063c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007d0  080007d0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080007d0  080007d0  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080007d0  080007d0  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007d0  080007d0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007d0  080007d0  000107d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080007d4  080007d4  000107d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080007d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000018  080007f0  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000004c  080007f0  0002004c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000ded  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000465  00000000  00000000  00020e35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000e0  00000000  00000000  000212a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000098  00000000  00000000  00021380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000df98  00000000  00000000  00021418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001580  00000000  00000000  0002f3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004fd9f  00000000  00000000  00030930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000806cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001f0  00000000  00000000  00080724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000018 	.word	0x20000018
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080007b8 	.word	0x080007b8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000001c 	.word	0x2000001c
 80001d0:	080007b8 	.word	0x080007b8

080001d4 <GPIO_EnableClock>:
#define _OUTTYPE_SHIFT 0

#define _PUPD_MASK ((unsigned char)0x06)
#define _PUPD_SHIFT 1

void GPIO_EnableClock(char PortName) {
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  switch (PortName) {
 80001de:	79fb      	ldrb	r3, [r7, #7]
 80001e0:	2b41      	cmp	r3, #65	; 0x41
 80001e2:	d002      	beq.n	80001ea <GPIO_EnableClock+0x16>
 80001e4:	2b42      	cmp	r3, #66	; 0x42
 80001e6:	d007      	beq.n	80001f8 <GPIO_EnableClock+0x24>
      break;
    case 'B':
      RCC_AHB1ENR |= (0x01 << 1);
      break;
    default:
      break;
 80001e8:	e00d      	b.n	8000206 <GPIO_EnableClock+0x32>
      RCC_AHB1ENR |= (0x01 << 0);
 80001ea:	4b0a      	ldr	r3, [pc, #40]	; (8000214 <GPIO_EnableClock+0x40>)
 80001ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001ee:	4a09      	ldr	r2, [pc, #36]	; (8000214 <GPIO_EnableClock+0x40>)
 80001f0:	f043 0301 	orr.w	r3, r3, #1
 80001f4:	6313      	str	r3, [r2, #48]	; 0x30
      break;
 80001f6:	e006      	b.n	8000206 <GPIO_EnableClock+0x32>
      RCC_AHB1ENR |= (0x01 << 1);
 80001f8:	4b06      	ldr	r3, [pc, #24]	; (8000214 <GPIO_EnableClock+0x40>)
 80001fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001fc:	4a05      	ldr	r2, [pc, #20]	; (8000214 <GPIO_EnableClock+0x40>)
 80001fe:	f043 0302 	orr.w	r3, r3, #2
 8000202:	6313      	str	r3, [r2, #48]	; 0x30
      break;
 8000204:	bf00      	nop
  }
}
 8000206:	bf00      	nop
 8000208:	370c      	adds	r7, #12
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	40023800 	.word	0x40023800

08000218 <GPIO_Init>:

void GPIO_Init(char PortName, unsigned char PinNum, unsigned char PinMode,
               unsigned char DefaultState) {
 8000218:	b490      	push	{r4, r7}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	4604      	mov	r4, r0
 8000220:	4608      	mov	r0, r1
 8000222:	4611      	mov	r1, r2
 8000224:	461a      	mov	r2, r3
 8000226:	4623      	mov	r3, r4
 8000228:	71fb      	strb	r3, [r7, #7]
 800022a:	4603      	mov	r3, r0
 800022c:	71bb      	strb	r3, [r7, #6]
 800022e:	460b      	mov	r3, r1
 8000230:	717b      	strb	r3, [r7, #5]
 8000232:	4613      	mov	r3, r2
 8000234:	713b      	strb	r3, [r7, #4]
  switch (PortName) {
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	2b41      	cmp	r3, #65	; 0x41
 800023a:	d002      	beq.n	8000242 <GPIO_Init+0x2a>
 800023c:	2b42      	cmp	r3, #66	; 0x42
 800023e:	d049      	beq.n	80002d4 <GPIO_Init+0xbc>

      GPIOB_PUPDR &= ~(0x03 << 2 * PinNum);
      GPIOB_PUPDR |= ((DefaultState & _PUPD_MASK) >> _PUPD_SHIFT) << (2 * PinNum);
      break;
  }
}
 8000240:	e091      	b.n	8000366 <GPIO_Init+0x14e>
      GPIOA_MODER &= ~(0x03 << 2 * PinNum);
 8000242:	4b4b      	ldr	r3, [pc, #300]	; (8000370 <GPIO_Init+0x158>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	79ba      	ldrb	r2, [r7, #6]
 8000248:	0052      	lsls	r2, r2, #1
 800024a:	2103      	movs	r1, #3
 800024c:	fa01 f202 	lsl.w	r2, r1, r2
 8000250:	43d2      	mvns	r2, r2
 8000252:	4611      	mov	r1, r2
 8000254:	4a46      	ldr	r2, [pc, #280]	; (8000370 <GPIO_Init+0x158>)
 8000256:	400b      	ands	r3, r1
 8000258:	6013      	str	r3, [r2, #0]
      GPIOA_MODER |= PinMode << 2 * PinNum;
 800025a:	4b45      	ldr	r3, [pc, #276]	; (8000370 <GPIO_Init+0x158>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	7979      	ldrb	r1, [r7, #5]
 8000260:	79ba      	ldrb	r2, [r7, #6]
 8000262:	0052      	lsls	r2, r2, #1
 8000264:	fa01 f202 	lsl.w	r2, r1, r2
 8000268:	4611      	mov	r1, r2
 800026a:	4a41      	ldr	r2, [pc, #260]	; (8000370 <GPIO_Init+0x158>)
 800026c:	430b      	orrs	r3, r1
 800026e:	6013      	str	r3, [r2, #0]
      GPIOA_OTYPER &= ~(1 << PinNum);
 8000270:	4b3f      	ldr	r3, [pc, #252]	; (8000370 <GPIO_Init+0x158>)
 8000272:	685b      	ldr	r3, [r3, #4]
 8000274:	79ba      	ldrb	r2, [r7, #6]
 8000276:	2101      	movs	r1, #1
 8000278:	fa01 f202 	lsl.w	r2, r1, r2
 800027c:	43d2      	mvns	r2, r2
 800027e:	4611      	mov	r1, r2
 8000280:	4a3b      	ldr	r2, [pc, #236]	; (8000370 <GPIO_Init+0x158>)
 8000282:	400b      	ands	r3, r1
 8000284:	6053      	str	r3, [r2, #4]
      GPIOA_OTYPER |= ((DefaultState & _OUTTYPE_MASK) >> _OUTTYPE_SHIFT) << PinNum;
 8000286:	4b3a      	ldr	r3, [pc, #232]	; (8000370 <GPIO_Init+0x158>)
 8000288:	685b      	ldr	r3, [r3, #4]
 800028a:	793a      	ldrb	r2, [r7, #4]
 800028c:	f002 0101 	and.w	r1, r2, #1
 8000290:	79ba      	ldrb	r2, [r7, #6]
 8000292:	fa01 f202 	lsl.w	r2, r1, r2
 8000296:	4611      	mov	r1, r2
 8000298:	4a35      	ldr	r2, [pc, #212]	; (8000370 <GPIO_Init+0x158>)
 800029a:	430b      	orrs	r3, r1
 800029c:	6053      	str	r3, [r2, #4]
      GPIOA_PUPDR &= ~(0x03 << 2 * PinNum);
 800029e:	4b34      	ldr	r3, [pc, #208]	; (8000370 <GPIO_Init+0x158>)
 80002a0:	68db      	ldr	r3, [r3, #12]
 80002a2:	79ba      	ldrb	r2, [r7, #6]
 80002a4:	0052      	lsls	r2, r2, #1
 80002a6:	2103      	movs	r1, #3
 80002a8:	fa01 f202 	lsl.w	r2, r1, r2
 80002ac:	43d2      	mvns	r2, r2
 80002ae:	4611      	mov	r1, r2
 80002b0:	4a2f      	ldr	r2, [pc, #188]	; (8000370 <GPIO_Init+0x158>)
 80002b2:	400b      	ands	r3, r1
 80002b4:	60d3      	str	r3, [r2, #12]
      GPIOA_PUPDR |= ((DefaultState & _PUPD_MASK) >> _PUPD_SHIFT) << (2 * PinNum);
 80002b6:	4b2e      	ldr	r3, [pc, #184]	; (8000370 <GPIO_Init+0x158>)
 80002b8:	68db      	ldr	r3, [r3, #12]
 80002ba:	793a      	ldrb	r2, [r7, #4]
 80002bc:	1052      	asrs	r2, r2, #1
 80002be:	f002 0103 	and.w	r1, r2, #3
 80002c2:	79ba      	ldrb	r2, [r7, #6]
 80002c4:	0052      	lsls	r2, r2, #1
 80002c6:	fa01 f202 	lsl.w	r2, r1, r2
 80002ca:	4611      	mov	r1, r2
 80002cc:	4a28      	ldr	r2, [pc, #160]	; (8000370 <GPIO_Init+0x158>)
 80002ce:	430b      	orrs	r3, r1
 80002d0:	60d3      	str	r3, [r2, #12]
      break;
 80002d2:	e048      	b.n	8000366 <GPIO_Init+0x14e>
      GPIOB_MODER &= ~(0x03 << 2 * PinNum);
 80002d4:	4b27      	ldr	r3, [pc, #156]	; (8000374 <GPIO_Init+0x15c>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	79ba      	ldrb	r2, [r7, #6]
 80002da:	0052      	lsls	r2, r2, #1
 80002dc:	2103      	movs	r1, #3
 80002de:	fa01 f202 	lsl.w	r2, r1, r2
 80002e2:	43d2      	mvns	r2, r2
 80002e4:	4611      	mov	r1, r2
 80002e6:	4a23      	ldr	r2, [pc, #140]	; (8000374 <GPIO_Init+0x15c>)
 80002e8:	400b      	ands	r3, r1
 80002ea:	6013      	str	r3, [r2, #0]
      GPIOB_MODER |= PinMode << 2 * PinNum;
 80002ec:	4b21      	ldr	r3, [pc, #132]	; (8000374 <GPIO_Init+0x15c>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	7979      	ldrb	r1, [r7, #5]
 80002f2:	79ba      	ldrb	r2, [r7, #6]
 80002f4:	0052      	lsls	r2, r2, #1
 80002f6:	fa01 f202 	lsl.w	r2, r1, r2
 80002fa:	4611      	mov	r1, r2
 80002fc:	4a1d      	ldr	r2, [pc, #116]	; (8000374 <GPIO_Init+0x15c>)
 80002fe:	430b      	orrs	r3, r1
 8000300:	6013      	str	r3, [r2, #0]
      GPIOB_OTYPER &= ~(1 << PinNum);
 8000302:	4b1c      	ldr	r3, [pc, #112]	; (8000374 <GPIO_Init+0x15c>)
 8000304:	685b      	ldr	r3, [r3, #4]
 8000306:	79ba      	ldrb	r2, [r7, #6]
 8000308:	2101      	movs	r1, #1
 800030a:	fa01 f202 	lsl.w	r2, r1, r2
 800030e:	43d2      	mvns	r2, r2
 8000310:	4611      	mov	r1, r2
 8000312:	4a18      	ldr	r2, [pc, #96]	; (8000374 <GPIO_Init+0x15c>)
 8000314:	400b      	ands	r3, r1
 8000316:	6053      	str	r3, [r2, #4]
      GPIOB_OTYPER |= ((DefaultState & _OUTTYPE_MASK) >> _OUTTYPE_SHIFT) << PinNum;
 8000318:	4b16      	ldr	r3, [pc, #88]	; (8000374 <GPIO_Init+0x15c>)
 800031a:	685b      	ldr	r3, [r3, #4]
 800031c:	793a      	ldrb	r2, [r7, #4]
 800031e:	f002 0101 	and.w	r1, r2, #1
 8000322:	79ba      	ldrb	r2, [r7, #6]
 8000324:	fa01 f202 	lsl.w	r2, r1, r2
 8000328:	4611      	mov	r1, r2
 800032a:	4a12      	ldr	r2, [pc, #72]	; (8000374 <GPIO_Init+0x15c>)
 800032c:	430b      	orrs	r3, r1
 800032e:	6053      	str	r3, [r2, #4]
      GPIOB_PUPDR &= ~(0x03 << 2 * PinNum);
 8000330:	4b10      	ldr	r3, [pc, #64]	; (8000374 <GPIO_Init+0x15c>)
 8000332:	68db      	ldr	r3, [r3, #12]
 8000334:	79ba      	ldrb	r2, [r7, #6]
 8000336:	0052      	lsls	r2, r2, #1
 8000338:	2103      	movs	r1, #3
 800033a:	fa01 f202 	lsl.w	r2, r1, r2
 800033e:	43d2      	mvns	r2, r2
 8000340:	4611      	mov	r1, r2
 8000342:	4a0c      	ldr	r2, [pc, #48]	; (8000374 <GPIO_Init+0x15c>)
 8000344:	400b      	ands	r3, r1
 8000346:	60d3      	str	r3, [r2, #12]
      GPIOB_PUPDR |= ((DefaultState & _PUPD_MASK) >> _PUPD_SHIFT) << (2 * PinNum);
 8000348:	4b0a      	ldr	r3, [pc, #40]	; (8000374 <GPIO_Init+0x15c>)
 800034a:	68db      	ldr	r3, [r3, #12]
 800034c:	793a      	ldrb	r2, [r7, #4]
 800034e:	1052      	asrs	r2, r2, #1
 8000350:	f002 0103 	and.w	r1, r2, #3
 8000354:	79ba      	ldrb	r2, [r7, #6]
 8000356:	0052      	lsls	r2, r2, #1
 8000358:	fa01 f202 	lsl.w	r2, r1, r2
 800035c:	4611      	mov	r1, r2
 800035e:	4a05      	ldr	r2, [pc, #20]	; (8000374 <GPIO_Init+0x15c>)
 8000360:	430b      	orrs	r3, r1
 8000362:	60d3      	str	r3, [r2, #12]
      break;
 8000364:	bf00      	nop
}
 8000366:	bf00      	nop
 8000368:	3708      	adds	r7, #8
 800036a:	46bd      	mov	sp, r7
 800036c:	bc90      	pop	{r4, r7}
 800036e:	4770      	bx	lr
 8000370:	40020000 	.word	0x40020000
 8000374:	40020400 	.word	0x40020400

08000378 <GPIO_WritePin>:

unsigned char GPIO_WritePin(char PortName, unsigned char PinNum,
                            unsigned char Data) {
 8000378:	b480      	push	{r7}
 800037a:	b085      	sub	sp, #20
 800037c:	af00      	add	r7, sp, #0
 800037e:	4603      	mov	r3, r0
 8000380:	71fb      	strb	r3, [r7, #7]
 8000382:	460b      	mov	r3, r1
 8000384:	71bb      	strb	r3, [r7, #6]
 8000386:	4613      	mov	r3, r2
 8000388:	717b      	strb	r3, [r7, #5]
  unsigned char result;
  switch (PortName) {
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	2b41      	cmp	r3, #65	; 0x41
 800038e:	d002      	beq.n	8000396 <GPIO_WritePin+0x1e>
 8000390:	2b42      	cmp	r3, #66	; 0x42
 8000392:	d02d      	beq.n	80003f0 <GPIO_WritePin+0x78>
 8000394:	e059      	b.n	800044a <GPIO_WritePin+0xd2>
    case ('A'):
      if (((GPIOA_MODER & (0x03 << 2 * PinNum)) >> (2 * PinNum)) == 1) {
 8000396:	4b32      	ldr	r3, [pc, #200]	; (8000460 <GPIO_WritePin+0xe8>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	79ba      	ldrb	r2, [r7, #6]
 800039c:	0052      	lsls	r2, r2, #1
 800039e:	2103      	movs	r1, #3
 80003a0:	fa01 f202 	lsl.w	r2, r1, r2
 80003a4:	401a      	ands	r2, r3
 80003a6:	79bb      	ldrb	r3, [r7, #6]
 80003a8:	005b      	lsls	r3, r3, #1
 80003aa:	fa22 f303 	lsr.w	r3, r2, r3
 80003ae:	2b01      	cmp	r3, #1
 80003b0:	d11b      	bne.n	80003ea <GPIO_WritePin+0x72>
        if (Data) {
 80003b2:	797b      	ldrb	r3, [r7, #5]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d00a      	beq.n	80003ce <GPIO_WritePin+0x56>
          GPIOA_ODR |= (1 << PinNum);
 80003b8:	4b29      	ldr	r3, [pc, #164]	; (8000460 <GPIO_WritePin+0xe8>)
 80003ba:	695b      	ldr	r3, [r3, #20]
 80003bc:	79ba      	ldrb	r2, [r7, #6]
 80003be:	2101      	movs	r1, #1
 80003c0:	fa01 f202 	lsl.w	r2, r1, r2
 80003c4:	4611      	mov	r1, r2
 80003c6:	4a26      	ldr	r2, [pc, #152]	; (8000460 <GPIO_WritePin+0xe8>)
 80003c8:	430b      	orrs	r3, r1
 80003ca:	6153      	str	r3, [r2, #20]
 80003cc:	e00a      	b.n	80003e4 <GPIO_WritePin+0x6c>
        } else {
          GPIOA_ODR &= ~(1 << PinNum);
 80003ce:	4b24      	ldr	r3, [pc, #144]	; (8000460 <GPIO_WritePin+0xe8>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	79ba      	ldrb	r2, [r7, #6]
 80003d4:	2101      	movs	r1, #1
 80003d6:	fa01 f202 	lsl.w	r2, r1, r2
 80003da:	43d2      	mvns	r2, r2
 80003dc:	4611      	mov	r1, r2
 80003de:	4a20      	ldr	r2, [pc, #128]	; (8000460 <GPIO_WritePin+0xe8>)
 80003e0:	400b      	ands	r3, r1
 80003e2:	6153      	str	r3, [r2, #20]
        }
        result = OK;
 80003e4:	2300      	movs	r3, #0
 80003e6:	73fb      	strb	r3, [r7, #15]
      } else {
        result = NOK;
      }
      break;
 80003e8:	e032      	b.n	8000450 <GPIO_WritePin+0xd8>
        result = NOK;
 80003ea:	2301      	movs	r3, #1
 80003ec:	73fb      	strb	r3, [r7, #15]
      break;
 80003ee:	e02f      	b.n	8000450 <GPIO_WritePin+0xd8>
    case ('B'):
      if (((GPIOB_MODER & (0x03 << 2 * PinNum)) >> (2 * PinNum)) == 1) {
 80003f0:	4b1c      	ldr	r3, [pc, #112]	; (8000464 <GPIO_WritePin+0xec>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	79ba      	ldrb	r2, [r7, #6]
 80003f6:	0052      	lsls	r2, r2, #1
 80003f8:	2103      	movs	r1, #3
 80003fa:	fa01 f202 	lsl.w	r2, r1, r2
 80003fe:	401a      	ands	r2, r3
 8000400:	79bb      	ldrb	r3, [r7, #6]
 8000402:	005b      	lsls	r3, r3, #1
 8000404:	fa22 f303 	lsr.w	r3, r2, r3
 8000408:	2b01      	cmp	r3, #1
 800040a:	d11b      	bne.n	8000444 <GPIO_WritePin+0xcc>
        if (Data) {
 800040c:	797b      	ldrb	r3, [r7, #5]
 800040e:	2b00      	cmp	r3, #0
 8000410:	d00a      	beq.n	8000428 <GPIO_WritePin+0xb0>
          GPIOB_ODR |= (1 << PinNum);
 8000412:	4b14      	ldr	r3, [pc, #80]	; (8000464 <GPIO_WritePin+0xec>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	79ba      	ldrb	r2, [r7, #6]
 8000418:	2101      	movs	r1, #1
 800041a:	fa01 f202 	lsl.w	r2, r1, r2
 800041e:	4611      	mov	r1, r2
 8000420:	4a10      	ldr	r2, [pc, #64]	; (8000464 <GPIO_WritePin+0xec>)
 8000422:	430b      	orrs	r3, r1
 8000424:	6153      	str	r3, [r2, #20]
 8000426:	e00a      	b.n	800043e <GPIO_WritePin+0xc6>
        } else {
          GPIOB_ODR &= ~(1 << PinNum);
 8000428:	4b0e      	ldr	r3, [pc, #56]	; (8000464 <GPIO_WritePin+0xec>)
 800042a:	695b      	ldr	r3, [r3, #20]
 800042c:	79ba      	ldrb	r2, [r7, #6]
 800042e:	2101      	movs	r1, #1
 8000430:	fa01 f202 	lsl.w	r2, r1, r2
 8000434:	43d2      	mvns	r2, r2
 8000436:	4611      	mov	r1, r2
 8000438:	4a0a      	ldr	r2, [pc, #40]	; (8000464 <GPIO_WritePin+0xec>)
 800043a:	400b      	ands	r3, r1
 800043c:	6153      	str	r3, [r2, #20]
        }
        result = OK;
 800043e:	2300      	movs	r3, #0
 8000440:	73fb      	strb	r3, [r7, #15]
      } else {
        result = NOK;
      }
      break;
 8000442:	e005      	b.n	8000450 <GPIO_WritePin+0xd8>
        result = NOK;
 8000444:	2301      	movs	r3, #1
 8000446:	73fb      	strb	r3, [r7, #15]
      break;
 8000448:	e002      	b.n	8000450 <GPIO_WritePin+0xd8>
    default:
      result = NOK;
 800044a:	2301      	movs	r3, #1
 800044c:	73fb      	strb	r3, [r7, #15]
      break;
 800044e:	bf00      	nop
  }  // end switch

  return result;
 8000450:	7bfb      	ldrb	r3, [r7, #15]
}
 8000452:	4618      	mov	r0, r3
 8000454:	3714      	adds	r7, #20
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	40020000 	.word	0x40020000
 8000464:	40020400 	.word	0x40020400

08000468 <GPIO_ReadPin>:

unsigned char GPIO_ReadPin(char PortName, unsigned char PinNum) {
 8000468:	b480      	push	{r7}
 800046a:	b085      	sub	sp, #20
 800046c:	af00      	add	r7, sp, #0
 800046e:	4603      	mov	r3, r0
 8000470:	460a      	mov	r2, r1
 8000472:	71fb      	strb	r3, [r7, #7]
 8000474:	4613      	mov	r3, r2
 8000476:	71bb      	strb	r3, [r7, #6]
  unsigned char data = 0;
 8000478:	2300      	movs	r3, #0
 800047a:	73fb      	strb	r3, [r7, #15]
  switch (PortName) {
 800047c:	79fb      	ldrb	r3, [r7, #7]
 800047e:	2b41      	cmp	r3, #65	; 0x41
 8000480:	d002      	beq.n	8000488 <GPIO_ReadPin+0x20>
 8000482:	2b42      	cmp	r3, #66	; 0x42
 8000484:	d00c      	beq.n	80004a0 <GPIO_ReadPin+0x38>
      break;
    case 'B':
      data = (GPIOB_IDR & (1 << PinNum)) >> PinNum;
      break;
    default:
      break;
 8000486:	e017      	b.n	80004b8 <GPIO_ReadPin+0x50>
      data = (GPIOA_IDR & (1 << PinNum)) >> PinNum;
 8000488:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <GPIO_ReadPin+0x60>)
 800048a:	691b      	ldr	r3, [r3, #16]
 800048c:	79ba      	ldrb	r2, [r7, #6]
 800048e:	2101      	movs	r1, #1
 8000490:	fa01 f202 	lsl.w	r2, r1, r2
 8000494:	401a      	ands	r2, r3
 8000496:	79bb      	ldrb	r3, [r7, #6]
 8000498:	fa22 f303 	lsr.w	r3, r2, r3
 800049c:	73fb      	strb	r3, [r7, #15]
      break;
 800049e:	e00b      	b.n	80004b8 <GPIO_ReadPin+0x50>
      data = (GPIOB_IDR & (1 << PinNum)) >> PinNum;
 80004a0:	4b0a      	ldr	r3, [pc, #40]	; (80004cc <GPIO_ReadPin+0x64>)
 80004a2:	691b      	ldr	r3, [r3, #16]
 80004a4:	79ba      	ldrb	r2, [r7, #6]
 80004a6:	2101      	movs	r1, #1
 80004a8:	fa01 f202 	lsl.w	r2, r1, r2
 80004ac:	401a      	ands	r2, r3
 80004ae:	79bb      	ldrb	r3, [r7, #6]
 80004b0:	fa22 f303 	lsr.w	r3, r2, r3
 80004b4:	73fb      	strb	r3, [r7, #15]
      break;
 80004b6:	bf00      	nop
  }
  return data;
 80004b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80004ba:	4618      	mov	r0, r3
 80004bc:	3714      	adds	r7, #20
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	40020000 	.word	0x40020000
 80004cc:	40020400 	.word	0x40020400

080004d0 <Keypdad_init>:
unsigned char key ;
unsigned char buttonState = 0;
unsigned char arr[4][3]={{1,2,3},{4,5,6},{7,8,9},{0,0,0}};
int k;
void Keypdad_init()
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	GPIO_Init('B', 0, OUTPUT, PUSH_PULL);
 80004d4:	2300      	movs	r3, #0
 80004d6:	2201      	movs	r2, #1
 80004d8:	2100      	movs	r1, #0
 80004da:	2042      	movs	r0, #66	; 0x42
 80004dc:	f7ff fe9c 	bl	8000218 <GPIO_Init>
	GPIO_Init('B', 1, OUTPUT, PUSH_PULL);
 80004e0:	2300      	movs	r3, #0
 80004e2:	2201      	movs	r2, #1
 80004e4:	2101      	movs	r1, #1
 80004e6:	2042      	movs	r0, #66	; 0x42
 80004e8:	f7ff fe96 	bl	8000218 <GPIO_Init>
	GPIO_Init('B', 2, OUTPUT, PUSH_PULL);
 80004ec:	2300      	movs	r3, #0
 80004ee:	2201      	movs	r2, #1
 80004f0:	2102      	movs	r1, #2
 80004f2:	2042      	movs	r0, #66	; 0x42
 80004f4:	f7ff fe90 	bl	8000218 <GPIO_Init>
	GPIO_Init('B', 3, INPUT, PULL_UP);
 80004f8:	2302      	movs	r3, #2
 80004fa:	2200      	movs	r2, #0
 80004fc:	2103      	movs	r1, #3
 80004fe:	2042      	movs	r0, #66	; 0x42
 8000500:	f7ff fe8a 	bl	8000218 <GPIO_Init>
	GPIO_Init('B', 4, INPUT, PULL_UP);
 8000504:	2302      	movs	r3, #2
 8000506:	2200      	movs	r2, #0
 8000508:	2104      	movs	r1, #4
 800050a:	2042      	movs	r0, #66	; 0x42
 800050c:	f7ff fe84 	bl	8000218 <GPIO_Init>
	GPIO_Init('B', 5, INPUT, PULL_UP);
 8000510:	2302      	movs	r3, #2
 8000512:	2200      	movs	r2, #0
 8000514:	2105      	movs	r1, #5
 8000516:	2042      	movs	r0, #66	; 0x42
 8000518:	f7ff fe7e 	bl	8000218 <GPIO_Init>
	GPIO_Init('B', 6, INPUT, PULL_UP);
 800051c:	2302      	movs	r3, #2
 800051e:	2200      	movs	r2, #0
 8000520:	2106      	movs	r1, #6
 8000522:	2042      	movs	r0, #66	; 0x42
 8000524:	f7ff fe78 	bl	8000218 <GPIO_Init>

	}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}

0800052c <Keypad_manage>:

void Keypad_manage()
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0

	unsigned char row,column,x;
	if(buttonState == 0){
 8000532:	4b2f      	ldr	r3, [pc, #188]	; (80005f0 <Keypad_manage+0xc4>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d156      	bne.n	80005e8 <Keypad_manage+0xbc>
	 for(column=0;column<3;column++)
 800053a:	2300      	movs	r3, #0
 800053c:	71bb      	strb	r3, [r7, #6]
 800053e:	e050      	b.n	80005e2 <Keypad_manage+0xb6>
	 {
		 GPIO_WritePin('B',0,1);
 8000540:	2201      	movs	r2, #1
 8000542:	2100      	movs	r1, #0
 8000544:	2042      	movs	r0, #66	; 0x42
 8000546:	f7ff ff17 	bl	8000378 <GPIO_WritePin>
		 GPIO_WritePin('B',1,1);
 800054a:	2201      	movs	r2, #1
 800054c:	2101      	movs	r1, #1
 800054e:	2042      	movs	r0, #66	; 0x42
 8000550:	f7ff ff12 	bl	8000378 <GPIO_WritePin>
		 GPIO_WritePin('B',2,1);
 8000554:	2201      	movs	r2, #1
 8000556:	2102      	movs	r1, #2
 8000558:	2042      	movs	r0, #66	; 0x42
 800055a:	f7ff ff0d 	bl	8000378 <GPIO_WritePin>
		 GPIO_WritePin('B',column,0);
 800055e:	79bb      	ldrb	r3, [r7, #6]
 8000560:	2200      	movs	r2, #0
 8000562:	4619      	mov	r1, r3
 8000564:	2042      	movs	r0, #66	; 0x42
 8000566:	f7ff ff07 	bl	8000378 <GPIO_WritePin>
	     for(row=3;row<7;row++){
 800056a:	2303      	movs	r3, #3
 800056c:	71fb      	strb	r3, [r7, #7]
 800056e:	e032      	b.n	80005d6 <Keypad_manage+0xaa>
	    	x =GPIO_ReadPin('B',(row));
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	4619      	mov	r1, r3
 8000574:	2042      	movs	r0, #66	; 0x42
 8000576:	f7ff ff77 	bl	8000468 <GPIO_ReadPin>
 800057a:	4603      	mov	r3, r0
 800057c:	717b      	strb	r3, [r7, #5]
	    	for(k=0;k<1000;k++){}
 800057e:	4b1d      	ldr	r3, [pc, #116]	; (80005f4 <Keypad_manage+0xc8>)
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	e004      	b.n	8000590 <Keypad_manage+0x64>
 8000586:	4b1b      	ldr	r3, [pc, #108]	; (80005f4 <Keypad_manage+0xc8>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	3301      	adds	r3, #1
 800058c:	4a19      	ldr	r2, [pc, #100]	; (80005f4 <Keypad_manage+0xc8>)
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	4b18      	ldr	r3, [pc, #96]	; (80005f4 <Keypad_manage+0xc8>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000598:	dbf5      	blt.n	8000586 <Keypad_manage+0x5a>
	    	x =GPIO_ReadPin('B',(row));
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	4619      	mov	r1, r3
 800059e:	2042      	movs	r0, #66	; 0x42
 80005a0:	f7ff ff62 	bl	8000468 <GPIO_ReadPin>
 80005a4:	4603      	mov	r3, r0
 80005a6:	717b      	strb	r3, [r7, #5]
	    	if (x==0){
 80005a8:	797b      	ldrb	r3, [r7, #5]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d110      	bne.n	80005d0 <Keypad_manage+0xa4>
	    	buttonState=1;
 80005ae:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <Keypad_manage+0xc4>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	701a      	strb	r2, [r3, #0]
	    	key=arr[row-3][column];
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	1eda      	subs	r2, r3, #3
 80005b8:	79b9      	ldrb	r1, [r7, #6]
 80005ba:	480f      	ldr	r0, [pc, #60]	; (80005f8 <Keypad_manage+0xcc>)
 80005bc:	4613      	mov	r3, r2
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	4413      	add	r3, r2
 80005c2:	4403      	add	r3, r0
 80005c4:	440b      	add	r3, r1
 80005c6:	781a      	ldrb	r2, [r3, #0]
 80005c8:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <Keypad_manage+0xd0>)
 80005ca:	701a      	strb	r2, [r3, #0]
	    	KeypadCallouts_KeyPressNotificaton();
 80005cc:	f000 f852 	bl	8000674 <KeypadCallouts_KeyPressNotificaton>
	     for(row=3;row<7;row++){
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	3301      	adds	r3, #1
 80005d4:	71fb      	strb	r3, [r7, #7]
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	2b06      	cmp	r3, #6
 80005da:	d9c9      	bls.n	8000570 <Keypad_manage+0x44>
	 for(column=0;column<3;column++)
 80005dc:	79bb      	ldrb	r3, [r7, #6]
 80005de:	3301      	adds	r3, #1
 80005e0:	71bb      	strb	r3, [r7, #6]
 80005e2:	79bb      	ldrb	r3, [r7, #6]
 80005e4:	2b02      	cmp	r3, #2
 80005e6:	d9ab      	bls.n	8000540 <Keypad_manage+0x14>
	    	}
	     }
	     }
	  }
	}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000034 	.word	0x20000034
 80005f4:	20000038 	.word	0x20000038
 80005f8:	20000000 	.word	0x20000000
 80005fc:	2000003c 	.word	0x2000003c

08000600 <Keypad_GetKey>:

unsigned char Keypad_GetKey(){
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
	if(buttonState==1){
 8000604:	4b07      	ldr	r3, [pc, #28]	; (8000624 <Keypad_GetKey+0x24>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d105      	bne.n	8000618 <Keypad_GetKey+0x18>
		buttonState =0;
 800060c:	4b05      	ldr	r3, [pc, #20]	; (8000624 <Keypad_GetKey+0x24>)
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
		return key;
 8000612:	4b05      	ldr	r3, [pc, #20]	; (8000628 <Keypad_GetKey+0x28>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	e000      	b.n	800061a <Keypad_GetKey+0x1a>
	}
	else
	{
		return -1;
 8000618:	23ff      	movs	r3, #255	; 0xff
	}
}
 800061a:	4618      	mov	r0, r3
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	20000034 	.word	0x20000034
 8000628:	2000003c 	.word	0x2000003c

0800062c <main>:

int i,j;
unsigned char arrr[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
unsigned char y;

int main(void) {
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	GPIO_EnableClock('A');
 8000630:	2041      	movs	r0, #65	; 0x41
 8000632:	f7ff fdcf 	bl	80001d4 <GPIO_EnableClock>
	GPIO_EnableClock('B');
 8000636:	2042      	movs	r0, #66	; 0x42
 8000638:	f7ff fdcc 	bl	80001d4 <GPIO_EnableClock>
	for (i=0;i<7;i++){
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <main+0x44>)
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	e00c      	b.n	800065e <main+0x32>
		GPIO_Init('A', i , OUTPUT, PUSH_PULL);
 8000644:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <main+0x44>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	b2d9      	uxtb	r1, r3
 800064a:	2300      	movs	r3, #0
 800064c:	2201      	movs	r2, #1
 800064e:	2041      	movs	r0, #65	; 0x41
 8000650:	f7ff fde2 	bl	8000218 <GPIO_Init>
	for (i=0;i<7;i++){
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <main+0x44>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	3301      	adds	r3, #1
 800065a:	4a05      	ldr	r2, [pc, #20]	; (8000670 <main+0x44>)
 800065c:	6013      	str	r3, [r2, #0]
 800065e:	4b04      	ldr	r3, [pc, #16]	; (8000670 <main+0x44>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2b06      	cmp	r3, #6
 8000664:	ddee      	ble.n	8000644 <main+0x18>
		}
	Keypdad_init();
 8000666:	f7ff ff33 	bl	80004d0 <Keypdad_init>

  while (1) {
	Keypad_manage();
 800066a:	f7ff ff5f 	bl	800052c <Keypad_manage>
 800066e:	e7fc      	b.n	800066a <main+0x3e>
 8000670:	20000044 	.word	0x20000044

08000674 <KeypadCallouts_KeyPressNotificaton>:

  return 0;
}

void  KeypadCallouts_KeyPressNotificaton()
	{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
		y= Keypad_GetKey();
 8000678:	f7ff ffc2 	bl	8000600 <Keypad_GetKey>
 800067c:	4603      	mov	r3, r0
 800067e:	461a      	mov	r2, r3
 8000680:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <KeypadCallouts_KeyPressNotificaton+0x78>)
 8000682:	701a      	strb	r2, [r3, #0]
		for(j=0;j<7;j++){
 8000684:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <KeypadCallouts_KeyPressNotificaton+0x7c>)
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	e028      	b.n	80006de <KeypadCallouts_KeyPressNotificaton+0x6a>
		    if((arrr[y] & (1<<j))>>j){
 800068c:	4b17      	ldr	r3, [pc, #92]	; (80006ec <KeypadCallouts_KeyPressNotificaton+0x78>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	461a      	mov	r2, r3
 8000692:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <KeypadCallouts_KeyPressNotificaton+0x80>)
 8000694:	5c9b      	ldrb	r3, [r3, r2]
 8000696:	4619      	mov	r1, r3
 8000698:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <KeypadCallouts_KeyPressNotificaton+0x7c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2201      	movs	r2, #1
 800069e:	fa02 f303 	lsl.w	r3, r2, r3
 80006a2:	ea01 0203 	and.w	r2, r1, r3
 80006a6:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <KeypadCallouts_KeyPressNotificaton+0x7c>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	fa42 f303 	asr.w	r3, r2, r3
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d008      	beq.n	80006c4 <KeypadCallouts_KeyPressNotificaton+0x50>
      			GPIO_WritePin('A', j, 1);
 80006b2:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <KeypadCallouts_KeyPressNotificaton+0x7c>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	2201      	movs	r2, #1
 80006ba:	4619      	mov	r1, r3
 80006bc:	2041      	movs	r0, #65	; 0x41
 80006be:	f7ff fe5b 	bl	8000378 <GPIO_WritePin>
 80006c2:	e007      	b.n	80006d4 <KeypadCallouts_KeyPressNotificaton+0x60>
	            		}
		    else {
		    	GPIO_WritePin('A', j, 0);
 80006c4:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <KeypadCallouts_KeyPressNotificaton+0x7c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	2200      	movs	r2, #0
 80006cc:	4619      	mov	r1, r3
 80006ce:	2041      	movs	r0, #65	; 0x41
 80006d0:	f7ff fe52 	bl	8000378 <GPIO_WritePin>
		for(j=0;j<7;j++){
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <KeypadCallouts_KeyPressNotificaton+0x7c>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	3301      	adds	r3, #1
 80006da:	4a05      	ldr	r2, [pc, #20]	; (80006f0 <KeypadCallouts_KeyPressNotificaton+0x7c>)
 80006dc:	6013      	str	r3, [r2, #0]
 80006de:	4b04      	ldr	r3, [pc, #16]	; (80006f0 <KeypadCallouts_KeyPressNotificaton+0x7c>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b06      	cmp	r3, #6
 80006e4:	ddd2      	ble.n	800068c <KeypadCallouts_KeyPressNotificaton+0x18>
		    	 }
		    			}
	}
 80006e6:	bf00      	nop
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000048 	.word	0x20000048
 80006f0:	20000040 	.word	0x20000040
 80006f4:	2000000c 	.word	0x2000000c

080006f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <SystemInit+0x20>)
 80006fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000702:	4a05      	ldr	r2, [pc, #20]	; (8000718 <SystemInit+0x20>)
 8000704:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000708:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800071c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000754 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000720:	480d      	ldr	r0, [pc, #52]	; (8000758 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000722:	490e      	ldr	r1, [pc, #56]	; (800075c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000724:	4a0e      	ldr	r2, [pc, #56]	; (8000760 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000728:	e002      	b.n	8000730 <LoopCopyDataInit>

0800072a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800072a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800072c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800072e:	3304      	adds	r3, #4

08000730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000734:	d3f9      	bcc.n	800072a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000736:	4a0b      	ldr	r2, [pc, #44]	; (8000764 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000738:	4c0b      	ldr	r4, [pc, #44]	; (8000768 <LoopFillZerobss+0x26>)
  movs r3, #0
 800073a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800073c:	e001      	b.n	8000742 <LoopFillZerobss>

0800073e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800073e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000740:	3204      	adds	r2, #4

08000742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000744:	d3fb      	bcc.n	800073e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000746:	f7ff ffd7 	bl	80006f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800074a:	f000 f811 	bl	8000770 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800074e:	f7ff ff6d 	bl	800062c <main>
  bx  lr    
 8000752:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000754:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000758:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800075c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000760:	080007d8 	.word	0x080007d8
  ldr r2, =_sbss
 8000764:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000768:	2000004c 	.word	0x2000004c

0800076c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800076c:	e7fe      	b.n	800076c <ADC_IRQHandler>
	...

08000770 <__libc_init_array>:
 8000770:	b570      	push	{r4, r5, r6, lr}
 8000772:	4d0d      	ldr	r5, [pc, #52]	; (80007a8 <__libc_init_array+0x38>)
 8000774:	4c0d      	ldr	r4, [pc, #52]	; (80007ac <__libc_init_array+0x3c>)
 8000776:	1b64      	subs	r4, r4, r5
 8000778:	10a4      	asrs	r4, r4, #2
 800077a:	2600      	movs	r6, #0
 800077c:	42a6      	cmp	r6, r4
 800077e:	d109      	bne.n	8000794 <__libc_init_array+0x24>
 8000780:	4d0b      	ldr	r5, [pc, #44]	; (80007b0 <__libc_init_array+0x40>)
 8000782:	4c0c      	ldr	r4, [pc, #48]	; (80007b4 <__libc_init_array+0x44>)
 8000784:	f000 f818 	bl	80007b8 <_init>
 8000788:	1b64      	subs	r4, r4, r5
 800078a:	10a4      	asrs	r4, r4, #2
 800078c:	2600      	movs	r6, #0
 800078e:	42a6      	cmp	r6, r4
 8000790:	d105      	bne.n	800079e <__libc_init_array+0x2e>
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f855 3b04 	ldr.w	r3, [r5], #4
 8000798:	4798      	blx	r3
 800079a:	3601      	adds	r6, #1
 800079c:	e7ee      	b.n	800077c <__libc_init_array+0xc>
 800079e:	f855 3b04 	ldr.w	r3, [r5], #4
 80007a2:	4798      	blx	r3
 80007a4:	3601      	adds	r6, #1
 80007a6:	e7f2      	b.n	800078e <__libc_init_array+0x1e>
 80007a8:	080007d0 	.word	0x080007d0
 80007ac:	080007d0 	.word	0x080007d0
 80007b0:	080007d0 	.word	0x080007d0
 80007b4:	080007d4 	.word	0x080007d4

080007b8 <_init>:
 80007b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ba:	bf00      	nop
 80007bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007be:	bc08      	pop	{r3}
 80007c0:	469e      	mov	lr, r3
 80007c2:	4770      	bx	lr

080007c4 <_fini>:
 80007c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007c6:	bf00      	nop
 80007c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007ca:	bc08      	pop	{r3}
 80007cc:	469e      	mov	lr, r3
 80007ce:	4770      	bx	lr
