
task2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001f4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000388  08000388  00010388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080003a8  080003a8  000103b0  2**0
                  CONTENTS
  4 .ARM          00000000  080003a8  080003a8  000103b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003a8  080003b0  000103b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003a8  080003a8  000103a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003ac  080003ac  000103ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003b0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003b0  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000103b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a2e  00000000  00000000  000103e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000269  00000000  00000000  00010e0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000070  00000000  00000000  00011078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000048  00000000  00000000  000110e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012c82  00000000  00000000  00011130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000c59  00000000  00000000  00023db2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007d49d  00000000  00000000  00024a0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a1ea8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000b4  00000000  00000000  000a1efc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000370 	.word	0x08000370

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000370 	.word	0x08000370

080001d4 <main>:
#include "stm32f401cc_interface.h"

int main(void) {
 80001d4:	b4b0      	push	{r4, r5, r7}
 80001d6:	b08d      	sub	sp, #52	; 0x34
 80001d8:	af00      	add	r7, sp, #0
	int i;
	int j=0;
 80001da:	2300      	movs	r3, #0
 80001dc:	62bb      	str	r3, [r7, #40]	; 0x28
	//enable clock
	RCC->AHB1ENR |= (1<<1);
 80001de:	4b30      	ldr	r3, [pc, #192]	; (80002a0 <main+0xcc>)
 80001e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e2:	4a2f      	ldr	r2, [pc, #188]	; (80002a0 <main+0xcc>)
 80001e4:	f043 0302 	orr.w	r3, r3, #2
 80001e8:	6313      	str	r3, [r2, #48]	; 0x30
    //clearing the pins (3,5,6,7)
	GPIOB->MODER &= ~((1011<<6));
 80001ea:	4b2e      	ldr	r3, [pc, #184]	; (80002a4 <main+0xd0>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	4a2d      	ldr	r2, [pc, #180]	; (80002a4 <main+0xd0>)
 80001f0:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 80001f4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80001f8:	6013      	str	r3, [r2, #0]
    //set the 3 pins of the led as output (5,6,7)
    GPIOB->MODER |= ((21<<10));
 80001fa:	4b2a      	ldr	r3, [pc, #168]	; (80002a4 <main+0xd0>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	4a29      	ldr	r2, [pc, #164]	; (80002a4 <main+0xd0>)
 8000200:	f443 43a8 	orr.w	r3, r3, #21504	; 0x5400
 8000204:	6013      	str	r3, [r2, #0]
    //set the led push-pull
    GPIOB->OTYPER &=~(7<<5);
 8000206:	4b27      	ldr	r3, [pc, #156]	; (80002a4 <main+0xd0>)
 8000208:	685b      	ldr	r3, [r3, #4]
 800020a:	4a26      	ldr	r2, [pc, #152]	; (80002a4 <main+0xd0>)
 800020c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8000210:	6053      	str	r3, [r2, #4]
    //set pin 3 as input
    GPIOB->MODER &= ~((3<<6));
 8000212:	4b24      	ldr	r3, [pc, #144]	; (80002a4 <main+0xd0>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	4a23      	ldr	r2, [pc, #140]	; (80002a4 <main+0xd0>)
 8000218:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800021c:	6013      	str	r3, [r2, #0]
    unsigned int color[] ={0b00100000,0b01100000,0b01000000,0b11000000,0b10000000,0b11100000,0b10100000,0b00000000};
 800021e:	4b22      	ldr	r3, [pc, #136]	; (80002a8 <main+0xd4>)
 8000220:	463c      	mov	r4, r7
 8000222:	461d      	mov	r5, r3
 8000224:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000228:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800022c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    while (1) {
	  int rising,falling;
	  rising = GPIOB->IDR;
 8000230:	4b1c      	ldr	r3, [pc, #112]	; (80002a4 <main+0xd0>)
 8000232:	691b      	ldr	r3, [r3, #16]
 8000234:	627b      	str	r3, [r7, #36]	; 0x24
	  for(i=0;i<10000;i++){}
 8000236:	2300      	movs	r3, #0
 8000238:	62fb      	str	r3, [r7, #44]	; 0x2c
 800023a:	e002      	b.n	8000242 <main+0x6e>
 800023c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800023e:	3301      	adds	r3, #1
 8000240:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000244:	f242 720f 	movw	r2, #9999	; 0x270f
 8000248:	4293      	cmp	r3, r2
 800024a:	ddf7      	ble.n	800023c <main+0x68>
	  falling = GPIOB->IDR;
 800024c:	4b15      	ldr	r3, [pc, #84]	; (80002a4 <main+0xd0>)
 800024e:	691b      	ldr	r3, [r3, #16]
 8000250:	623b      	str	r3, [r7, #32]
      if (j==8){
 8000252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000254:	2b08      	cmp	r3, #8
 8000256:	d101      	bne.n	800025c <main+0x88>
    	 j=0;
 8000258:	2300      	movs	r3, #0
 800025a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if(((GPIOB->IDR & (1<<3)) >>3) &&(rising != falling) ){
 800025c:	4b11      	ldr	r3, [pc, #68]	; (80002a4 <main+0xd0>)
 800025e:	691b      	ldr	r3, [r3, #16]
 8000260:	f003 0308 	and.w	r3, r3, #8
 8000264:	2b00      	cmp	r3, #0
 8000266:	d0e3      	beq.n	8000230 <main+0x5c>
 8000268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800026a:	6a3b      	ldr	r3, [r7, #32]
 800026c:	429a      	cmp	r2, r3
 800026e:	d0df      	beq.n	8000230 <main+0x5c>
      GPIOB->ODR = color[j] ;
 8000270:	4a0c      	ldr	r2, [pc, #48]	; (80002a4 <main+0xd0>)
 8000272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000274:	009b      	lsls	r3, r3, #2
 8000276:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800027a:	440b      	add	r3, r1
 800027c:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8000280:	6153      	str	r3, [r2, #20]
      for(i=0;i<100000;i++){}
 8000282:	2300      	movs	r3, #0
 8000284:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000286:	e002      	b.n	800028e <main+0xba>
 8000288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800028a:	3301      	adds	r3, #1
 800028c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800028e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000290:	4a06      	ldr	r2, [pc, #24]	; (80002ac <main+0xd8>)
 8000292:	4293      	cmp	r3, r2
 8000294:	ddf8      	ble.n	8000288 <main+0xb4>
      j++;
 8000296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000298:	3301      	adds	r3, #1
 800029a:	62bb      	str	r3, [r7, #40]	; 0x28
    while (1) {
 800029c:	e7c8      	b.n	8000230 <main+0x5c>
 800029e:	bf00      	nop
 80002a0:	40023800 	.word	0x40023800
 80002a4:	40020400 	.word	0x40020400
 80002a8:	08000388 	.word	0x08000388
 80002ac:	0001869f 	.word	0x0001869f

080002b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002b4:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <SystemInit+0x20>)
 80002b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002ba:	4a05      	ldr	r2, [pc, #20]	; (80002d0 <SystemInit+0x20>)
 80002bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	e000ed00 	.word	0xe000ed00

080002d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80002d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800030c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80002d8:	480d      	ldr	r0, [pc, #52]	; (8000310 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80002da:	490e      	ldr	r1, [pc, #56]	; (8000314 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80002dc:	4a0e      	ldr	r2, [pc, #56]	; (8000318 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e0:	e002      	b.n	80002e8 <LoopCopyDataInit>

080002e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002e6:	3304      	adds	r3, #4

080002e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002ec:	d3f9      	bcc.n	80002e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ee:	4a0b      	ldr	r2, [pc, #44]	; (800031c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80002f0:	4c0b      	ldr	r4, [pc, #44]	; (8000320 <LoopFillZerobss+0x26>)
  movs r3, #0
 80002f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f4:	e001      	b.n	80002fa <LoopFillZerobss>

080002f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f8:	3204      	adds	r2, #4

080002fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002fc:	d3fb      	bcc.n	80002f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80002fe:	f7ff ffd7 	bl	80002b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000302:	f000 f811 	bl	8000328 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000306:	f7ff ff65 	bl	80001d4 <main>
  bx  lr    
 800030a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800030c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000314:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000318:	080003b0 	.word	0x080003b0
  ldr r2, =_sbss
 800031c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000320:	2000001c 	.word	0x2000001c

08000324 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000324:	e7fe      	b.n	8000324 <ADC_IRQHandler>
	...

08000328 <__libc_init_array>:
 8000328:	b570      	push	{r4, r5, r6, lr}
 800032a:	4d0d      	ldr	r5, [pc, #52]	; (8000360 <__libc_init_array+0x38>)
 800032c:	4c0d      	ldr	r4, [pc, #52]	; (8000364 <__libc_init_array+0x3c>)
 800032e:	1b64      	subs	r4, r4, r5
 8000330:	10a4      	asrs	r4, r4, #2
 8000332:	2600      	movs	r6, #0
 8000334:	42a6      	cmp	r6, r4
 8000336:	d109      	bne.n	800034c <__libc_init_array+0x24>
 8000338:	4d0b      	ldr	r5, [pc, #44]	; (8000368 <__libc_init_array+0x40>)
 800033a:	4c0c      	ldr	r4, [pc, #48]	; (800036c <__libc_init_array+0x44>)
 800033c:	f000 f818 	bl	8000370 <_init>
 8000340:	1b64      	subs	r4, r4, r5
 8000342:	10a4      	asrs	r4, r4, #2
 8000344:	2600      	movs	r6, #0
 8000346:	42a6      	cmp	r6, r4
 8000348:	d105      	bne.n	8000356 <__libc_init_array+0x2e>
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000350:	4798      	blx	r3
 8000352:	3601      	adds	r6, #1
 8000354:	e7ee      	b.n	8000334 <__libc_init_array+0xc>
 8000356:	f855 3b04 	ldr.w	r3, [r5], #4
 800035a:	4798      	blx	r3
 800035c:	3601      	adds	r6, #1
 800035e:	e7f2      	b.n	8000346 <__libc_init_array+0x1e>
 8000360:	080003a8 	.word	0x080003a8
 8000364:	080003a8 	.word	0x080003a8
 8000368:	080003a8 	.word	0x080003a8
 800036c:	080003ac 	.word	0x080003ac

08000370 <_init>:
 8000370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000372:	bf00      	nop
 8000374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000376:	bc08      	pop	{r3}
 8000378:	469e      	mov	lr, r3
 800037a:	4770      	bx	lr

0800037c <_fini>:
 800037c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037e:	bf00      	nop
 8000380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000382:	bc08      	pop	{r3}
 8000384:	469e      	mov	lr, r3
 8000386:	4770      	bx	lr
